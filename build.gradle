/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2'
        }
    }
    dependencies {

        classpath 'org.openjfx:javafx-plugin:0.0.8'
    }
}



plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'com.bmuschko.clover' version '2.2.3'
    id 'org.openjfx.javafxplugin' version '0.0.8'

}



run {

 standardInput = System.in

}

application {
    // Define the main class for the application.
    //mainClassName = 'risc.App'
    mainClassName = "server.risc.App"

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()

}



subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    apply plugin: "org.openjfx.javafxplugin"

    sourceCompatibility = 1.11

    javafx {
        version = "14"
        modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        compile 'com.googlecode.json-simple:json-simple:1.1.1'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
        testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
    }
    clover{
        java {
            sourceCompatibility = JavaVersion.VERSION_1_9
            targetCompatibility = JavaVersion.VERSION_1_9
        }
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
    }

    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
}

// Project specific stuff
project (':shared'){
    dependencies {
        compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
        compile group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
        compile group: 'com.jfoenix', name: 'jfoenix', version: '9.0.1'
    }


}
project (':server'){
    dependencies {
        implementation project(':shared')
    }
}
project (':client'){
    dependencies {

        implementation project(':shared')
    } 
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

run {
    jvmArgs = [
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
            "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
            "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
    ]
 standardInput = System.in

}

clover {
    java {
        sourceCompatibility = JavaVersion.VERSION_1_9
        targetCompatibility = JavaVersion.VERSION_1_9
    }

    compiler{
        additionalArgs = "-g:lines,source,vars"
    }
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.debug = true
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}

